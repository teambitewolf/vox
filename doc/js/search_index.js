var search_data = {"index":{"searchIndex":["audioprocessor","card","descriptor","layer","object","omniauth","rack","session","session","storange","uploadedfile","user","vox","filenotwritten","invalidfiletype","voxchain","voximage","mongoid","add()","add_before()","add_under()","audio?()","breaks()","check_wristwatch()","comes_before?()","connection()","current_user()","destroy()","empty?()","fetch()","file_dir()","file_path()","file_path_p()","flash()","flash=()","have_another_splice()","in_order?()","layer!()","layer_dir()","layer_path()","layers!()","merge_conflict()","move()","never_break_the_chain()","new()","new()","new()","nil?()","ordered_voxes()","persist()","persisted?()","processed?()","put_on_your_sox()","remove()","save()","sox_process!()","sox_time!()","splice()","splice!()","splice_dir()","splice_path()","update()","gemfile","gemfile.lock","license","readme","config.ru","add.haml","add_before.haml","add_under.haml","error.haml","half_under.haml","layout.haml","login.haml","move.haml","new.haml","ordered.haml","user.haml","vox.haml"],"longSearchIndex":["audioprocessor","card","descriptor","layer","object","omniauth","rack","rack::session","session","storange","uploadedfile","user","vox","vox::filenotwritten","vox::invalidfiletype","voxchain","voximage","voximage::mongoid","voxchain#add()","voxchain#add_before()","voxchain#add_under()","uploadedfile#audio?()","voxchain#breaks()","audioprocessor#check_wristwatch()","voxchain#comes_before?()","storange#connection()","object#current_user()","storange#destroy()","uploadedfile#empty?()","storange#fetch()","vox#file_dir()","vox#file_path()","vox#file_path_p()","object#flash()","object#flash=()","audioprocessor#have_another_splice()","voxchain#in_order?()","audioprocessor#layer!()","voxchain#layer_dir()","voxchain#layer_path()","audioprocessor#layers!()","audioprocessor#merge_conflict()","voxchain#move()","audioprocessor#never_break_the_chain()","session::new()","uploadedfile::new()","vox::new()","uploadedfile#nil?()","voxchain#ordered_voxes()","vox#persist()","vox#persisted?()","vox#processed?()","audioprocessor#put_on_your_sox()","voxchain#remove()","storange#save()","audioprocessor#sox_process!()","audioprocessor#sox_time!()","audioprocessor#splice()","audioprocessor#splice!()","voxchain#splice_dir()","voxchain#splice_path()","storange#update()","","","","","","","","","","","","","","","","",""],"info":[["AudioProcessor","","AudioProcessor.html","",""],["Card","","Card.html","",""],["Descriptor","","Descriptor.html","",""],["Layer","","Layer.html","",""],["Object","","Object.html","",""],["OmniAuth","","OmniAuth.html","",""],["Rack","","Rack.html","",""],["Rack::Session","","Rack/Session.html","",""],["Session","","Session.html","",""],["Storange","","Storange.html","",""],["UploadedFile","","UploadedFile.html","",""],["User","","User.html","",""],["Vox","","Vox.html","",""],["Vox::FileNotWritten","","Vox/FileNotWritten.html","",""],["Vox::InvalidFileType","","Vox/InvalidFileType.html","",""],["VoxChain","","VoxChain.html","",""],["VoxImage","","VoxImage.html","",""],["VoxImage::Mongoid","","VoxImage/Mongoid.html","",""],["add","VoxChain","VoxChain.html#method-i-add","(new_vox)",""],["add_before","VoxChain","VoxChain.html#method-i-add_before","(the_vox, new_vox)",""],["add_under","VoxChain","VoxChain.html#method-i-add_under","(vox, start_vox, end_vox)",""],["audio?","UploadedFile","UploadedFile.html#method-i-audio-3F","()",""],["breaks","VoxChain","VoxChain.html#method-i-breaks","()",""],["check_wristwatch","AudioProcessor","AudioProcessor.html#method-i-check_wristwatch","()",""],["comes_before?","VoxChain","VoxChain.html#method-i-comes_before-3F","(the_vox, maybe_before)",""],["connection","Storange","Storange.html#method-i-connection","()",""],["current_user","Object","Object.html#method-i-current_user","()",""],["destroy","Storange","Storange.html#method-i-destroy","()",""],["empty?","UploadedFile","UploadedFile.html#method-i-empty-3F","()",""],["fetch","Storange","Storange.html#method-i-fetch","(col, val)",""],["file_dir","Vox","Vox.html#method-i-file_dir","(root_path)",""],["file_path","Vox","Vox.html#method-i-file_path","(dir, name)",""],["file_path_p","Vox","Vox.html#method-i-file_path_p","(original)",""],["flash","Object","Object.html#method-i-flash","()",""],["flash=","Object","Object.html#method-i-flash-3D","(vals)",""],["have_another_splice","AudioProcessor","AudioProcessor.html#method-i-have_another_splice","()",""],["in_order?","VoxChain","VoxChain.html#method-i-in_order-3F","(*voxes)",""],["layer!","AudioProcessor","AudioProcessor.html#method-i-layer-21","(start_vox, end_vox, layer_vox)","<p>To combine mix and effects (pad, trim etc) use the following:\n<p>sox -m “|sox end.mp3 -p pad 6 0” …\n"],["layer_dir","VoxChain","VoxChain.html#method-i-layer_dir","(root_path=nil)",""],["layer_path","VoxChain","VoxChain.html#method-i-layer_path","(root_path)",""],["layers!","AudioProcessor","AudioProcessor.html#method-i-layers-21","()",""],["merge_conflict","AudioProcessor","AudioProcessor.html#method-i-merge_conflict","(start_time, end_time)","<p>start_time is the overall beginning time of the vox that starts the layer.\nend_time is either the overall …\n"],["move","VoxChain","VoxChain.html#method-i-move","(pos, move_vox, to_vox)",""],["never_break_the_chain","AudioProcessor","AudioProcessor.html#method-i-never_break_the_chain","()",""],["new","Session","Session.html#method-c-new","()",""],["new","UploadedFile","UploadedFile.html#method-c-new","(attrs)","<p>fetch from Sinatra upload params\n"],["new","Vox","Vox.html#method-c-new","(attrs={}, upload=nil, root_path=nil, options={})",""],["nil?","UploadedFile","UploadedFile.html#method-i-nil-3F","()",""],["ordered_voxes","VoxChain","VoxChain.html#method-i-ordered_voxes","()",""],["persist","Vox","Vox.html#method-i-persist","(ups, root_path)","<p>params ups:UploadedFile returns FileDescriptor\n"],["persisted?","Vox","Vox.html#method-i-persisted-3F","()",""],["processed?","Vox","Vox.html#method-i-processed-3F","()",""],["put_on_your_sox","AudioProcessor","AudioProcessor.html#method-i-put_on_your_sox","(nm=true, eq=true, cm=true)",""],["remove","VoxChain","VoxChain.html#method-i-remove","(vox_id)",""],["save","Storange","Storange.html#method-i-save","()",""],["sox_process!","AudioProcessor","AudioProcessor.html#method-i-sox_process-21","(options={})","<p>options: Hash :norm, :eq, :compress\n"],["sox_time!","AudioProcessor","AudioProcessor.html#method-i-sox_time-21","(rerun=false)",""],["splice","AudioProcessor","AudioProcessor.html#method-i-splice","()",""],["splice!","AudioProcessor","AudioProcessor.html#method-i-splice-21","(root_path=nil, options={})",""],["splice_dir","VoxChain","VoxChain.html#method-i-splice_dir","(root_path=nil)",""],["splice_path","VoxChain","VoxChain.html#method-i-splice_path","(root_path)",""],["update","Storange","Storange.html#method-i-update","()",""],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p>gem &#39;sinatra&#39; gem &#39;mongoid&#39; gem &#39;omniauth&#39; gem\n&#39;omniauth-twitter&#39; …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  activemodel (4.1.8)\n    activesupport (= 4.1.8)\n    builder ...</pre>\n"],["LICENSE","","LICENSE.html","","<p>The MIT License (MIT)\n<p>Copyright © 2015 teambitewolf\n<p>Permission is hereby granted, free of charge, to …\n"],["README","","README_md.html","","<p>vox\n<p>audio feeds for the people/async podcasting\n<p>more to follow\n"],["config.ru","","config_ru.html","","<p>require_relative &#39;app&#39;\n<p>run Sinatra::Application\n"],["add.haml","","views/add_haml.html","","<p>%form{action: “/vox/#{@vc.id}/add”, method: &#39;post&#39;, enctype:\n&#39;multipart/form-data&#39;} …\n"],["add_before.haml","","views/add_before_haml.html","","<p>%form{action: “/vox/#{@vc.id}/add_before”, method: &#39;post&#39;, enctype:\n&#39;multipart/form-data&#39;} …\n"],["add_under.haml","","views/add_under_haml.html","","<p>%form{action: “/vox/#{@vc.id}/add_under”, method: &#39;post&#39;, enctype:\n&#39;multipart/form-data&#39;} …\n"],["error.haml","","views/error_haml.html","","<p>%h1 JESUS CHRIST!\n"],["half_under.haml","","views/half_under_haml.html","","<p>:javascript\n\n<pre>$(document).ready(function() {\n  var audio = $(&#39;#player&#39;).get(0);\n  var bar   = $(&#39;.bar&#39;); ...</pre>\n"],["layout.haml","","views/layout_haml.html","","<p>!!! %html\n\n<pre>%head\n  :css\n    body {\n      font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif;\n ...</pre>\n"],["login.haml","","views/login_haml.html","","<p>%a{href: &#39;/auth/developer&#39;} authenticate with developer %br\n%a{href: &#39;/auth/twitter&#39;} …\n"],["move.haml","","views/move_haml.html","","<p>%form{action: “/vox/#{@vc.id}/move”, method: &#39;post&#39;}\n\n<pre>%span move this:\n- starts_at = ...</pre>\n"],["new.haml","","views/new_haml.html","","<p>%form{action: &#39;/vox&#39;, method: &#39;post&#39;, enctype:\n&#39;multipart/form-data&#39;}\n\n<pre>%input{type: ...</pre>\n"],["ordered.haml","","views/ordered_haml.html","","<p>%body\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">%</span><span class=\"ruby-identifier\">iv</span>{<span class=\"ruby-identifier\">style</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-string\">&#39;padding:0 50px 0 50px;height:100%;width:100%&#39;</span>}\n<span class=\"ruby-operator\">-</span> <span class=\"ruby-ivar\">@vc</span>.<span class=\"ruby-identifier\">voxes</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">u</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-operator\">-</span> <span class=\"ruby-identifier\">starts_at</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["user.haml","","views/user_haml.html","","<p>if current_user.id == @user.id %a{href: “/users/#{@user.id}/edit”} edit\nprofile\n<p>&#39; | &#39; …\n"],["vox.haml","","views/vox_haml.html","","<p>:javascript\n\n<pre>$(document).ready(function() {\n  var audio = $(&#39;#player&#39;).get(0);\n  var bar   = $(&#39;.bar&#39;); ...</pre>\n"]]}}